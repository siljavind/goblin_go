// Mocks generated by Mockito 5.4.6 from annotations
// in goblin_go/test/session_tracker_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i7;

import 'package:geolocator/geolocator.dart' as _i5;
import 'package:goblin_go/services/background/background_service.dart' as _i4;
import 'package:goblin_go/services/tracking/mapbox_service.dart' as _i2;
import 'package:goblin_go/services/tracking/timer_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeObject_0 extends _i1.SmartFake implements Object {
  _FakeObject_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MapboxService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapboxService extends _i1.Mock implements _i2.MapboxService {
  MockMapboxService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Object get accessToken =>
      (super.noSuchMethod(
            Invocation.getter(#accessToken),
            returnValue: _FakeObject_0(this, Invocation.getter(#accessToken)),
          )
          as Object);

  @override
  _i3.Future<bool> isPositionOutside({
    required double? longitude,
    required double? latitude,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#isPositionOutside, [], {
              #longitude: longitude,
              #latitude: latitude,
            }),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}

/// A class which mocks [BackgroundService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackgroundService extends _i1.Mock implements _i4.BackgroundService {
  MockBackgroundService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i5.Position> positionStream() =>
      (super.noSuchMethod(
            Invocation.method(#positionStream, []),
            returnValue: _i3.Stream<_i5.Position>.empty(),
          )
          as _i3.Stream<_i5.Position>);

  @override
  _i3.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> pauseTracking() =>
      (super.noSuchMethod(
            Invocation.method(#pauseTracking, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> resumeTracking() =>
      (super.noSuchMethod(
            Invocation.method(#resumeTracking, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [TimerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerService extends _i1.Mock implements _i6.TimerService {
  MockTimerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void startMidnightTimer({required _i7.VoidCallback? onMidnight}) =>
      super.noSuchMethod(
        Invocation.method(#startMidnightTimer, [], {#onMidnight: onMidnight}),
        returnValueForMissingStub: null,
      );

  @override
  void cancel() => super.noSuchMethod(
    Invocation.method(#cancel, []),
    returnValueForMissingStub: null,
  );
}
